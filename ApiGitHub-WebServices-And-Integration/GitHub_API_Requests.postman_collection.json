{
	"info": {
		"_postman_id": "fac86893-6297-47d5-89f5-c608a6851f8b",
		"name": "GitHub API Requests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Retrieve All Issues from Repo",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"HTTP status\", function(){\r",
							" pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Http returns arrays of issues\", function() {  \r",
							"  const json = pm.response.json();\r",
							"  pm.expect(Array.isArray(json)).equals(true);\r",
							"  for (let item of json) {\r",
							"    pm.expect(typeof(item)).equals(\"object\");   \r",
							"    pm.expect(typeof(item.id)).equals(\"number\");\r",
							"    pm.expect(typeof(item.title)).equals(\"string\");\r",
							"  }\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://api.github.com/repos/testnakov/test-nakov-repo/issues",
					"protocol": "https",
					"host": [
						"api",
						"github",
						"com"
					],
					"path": [
						"repos",
						"testnakov",
						"test-nakov-repo",
						"issues"
					]
				}
			},
			"response": []
		},
		{
			"name": "Retrieve Issue by Number",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let body= pm.response.json();\r",
							"\r",
							"pm.test(\"HTTP status 1\", function(){\r",
							" pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"HTTP status 2\", function(){\r",
							" pm.expect(pm.response.code, \"STATUS CODE\").to.equal(200);\r",
							"});\r",
							"\r",
							"pm.test(\"HTTP status\", function(){\r",
							" pm.expect(pm.response.status).to.equal('OK');\r",
							"});\r",
							"\r",
							"pm.test(\"Response holds an 'issue' object\", function() { \r",
							"    pm.expect(pm.response.headers.get('Content-Type'))\r",
							"    .equals('application/json; charset=utf-8'); \r",
							"    const issue = pm.response.json();\r",
							"    pm.expect(typeof(issue)).equals(\"object\");   \r",
							"    pm.expect(Number.isInteger(issue.id)).equals(true);\r",
							"    pm.expect(typeof(issue.title)).equals(\"string\");\r",
							"  });\r",
							"\r",
							"pm.test(\"Check URL property\", function(){ \r",
							" pm.expect(body.url, \"URL property\").to.equal(\"https://api.github.com/repos/testnakov/test-nakov-repo/issues/3035\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check issue number\", function(){ \r",
							" pm.expect(body.number, \"Number property\").to.equal(3035);\r",
							"});\r",
							"\r",
							"pm.test(\"Check issue ID\", function(){ \r",
							" pm.expect(body.id, \"ID property\").to.equal(1040568827);\r",
							"});\r",
							"\r",
							"pm.test(\"Check issue body\", function(){ \r",
							" pm.expect(body.body).to.equal(\"Edit body...\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.github.com/repos/testnakov/test-nakov-repo/issues/3035",
					"protocol": "https",
					"host": [
						"api",
						"github",
						"com"
					],
					"path": [
						"repos",
						"testnakov",
						"test-nakov-repo",
						"issues",
						"3035"
					]
				}
			},
			"response": []
		},
		{
			"name": "Retrieve Issue by invalid number",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"HTTP status 1\", function(){\r",
							" pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.github.com/repos/testnakov/test-nakov-repo/issues/",
					"protocol": "https",
					"host": [
						"api",
						"github",
						"com"
					],
					"path": [
						"repos",
						"testnakov",
						"test-nakov-repo",
						"issues",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Retrieve All Labels for Issue",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"HTTP status\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Check array\", function(){\r",
							"    const json = pm.response.json();\r",
							"    pm.expect(Array.isArray(json)).equals(true);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://api.github.com/repos/testnakov/test-nakov-repo/issues/3035/labels",
					"protocol": "https",
					"host": [
						"api",
						"github",
						"com"
					],
					"path": [
						"repos",
						"testnakov",
						"test-nakov-repo",
						"issues",
						"3035",
						"labels"
					]
				}
			},
			"response": []
		},
		{
			"name": "Retrieve a Comment by Id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let body = pm.response.json();\r",
							"\r",
							"pm.test(\"HTTP status\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Chech ID\", function(){\r",
							"    pm.expect(body.id).equal(981050941);\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://api.github.com/repos/testnakov/test-nakov-repo/issues/comments/981050941",
					"protocol": "https",
					"host": [
						"api",
						"github",
						"com"
					],
					"path": [
						"repos",
						"testnakov",
						"test-nakov-repo",
						"issues",
						"comments",
						"981050941"
					]
				}
			},
			"response": []
		},
		{
			"name": "Retrieve All Comments for Issue",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const body = pm.response.json();\r",
							"\r",
							"pm.test(\"HTTP status\", function(){\r",
							" pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Http returns arrays of issues\", function() { \r",
							"  pm.expect(Array.isArray(body)).equals(true);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://api.github.com/repos/testnakov/test-nakov-repo/issues/3037/comments",
					"protocol": "https",
					"host": [
						"api",
						"github",
						"com"
					],
					"path": [
						"repos",
						"testnakov",
						"test-nakov-repo",
						"issues",
						"3037",
						"comments"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create a New Issue",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let body= pm.response.json();\r",
							"let number = body.number;\r",
							"\r",
							"pm.test(\"HTTP status 1\", function(){\r",
							" pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"HTTP status 2\", function(){\r",
							" pm.expect(pm.response.code).to.equal(201);\r",
							"});\r",
							"\r",
							"pm.test(\"HTTP status 3\", function(){\r",
							" pm.expect(pm.response.code, \"STATUS CODE\").to.equal(201);\r",
							"});\r",
							"\r",
							"pm.test(\"HTTP status 4\", () => {\r",
							" pm.expect(pm.response.code).to.equal(201);\r",
							"});\r",
							"\r",
							"pm.test(\"HTTP status\", function(){\r",
							" pm.expect(pm.response.status).to.equal('Created');\r",
							"});\r",
							"\r",
							"pm.test(\"Response holds the posted issue 'issue' object\", function(){\r",
							"    pm.expect(pm.response.headers.get('Content-Type'))\r",
							"    .equals('application/json; charset=utf-8');\r",
							"    const requestIssue = JSON.parse(pm.request.body);\r",
							"    const responseIssue = pm.response.json();\r",
							"    pm.expect(typeof(responseIssue)).equals(\"object\");\r",
							"    pm.expect(Number.isInteger(responseIssue.id)).equals(true);\r",
							"    pm.expect(requestIssue.title).equals(responseIssue.title);\r",
							"    pm.expect(requestIssue.body).equals(responseIssue.body);  \r",
							"})\r",
							"\r",
							"\r",
							"pm.test(\"Check issue URL\", function(){ \r",
							"    let url = \"https://api.github.com/repos/testnakov/test-nakov-repo/issues/\" + number;\r",
							" pm.expect(body.url, \"URL property\").to.equal(url);\r",
							"});\r",
							"\r",
							"pm.test(\"Check issue number\", function(){ \r",
							" pm.expect(body.number, \"Number property\").to.be.greaterThan(1);\r",
							"});\r",
							"\r",
							"pm.test(\"Check issue ID\", function(){ \r",
							" pm.expect(body.id, \"ID property\").to.be.greaterThan(1);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "ENTER YOUR PASSWORD, PLEASE.",
							"type": "string"
						},
						{
							"key": "username",
							"value": "ENTER YOUR USERNAME, PLEASE.",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"title\": \"I have created an issue\",\r\n\"body\": \"This is the body of issue.\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://api.github.com/repos/testnakov/test-nakov-repo/issues",
					"protocol": "https",
					"host": [
						"api",
						"github",
						"com"
					],
					"path": [
						"repos",
						"testnakov",
						"test-nakov-repo",
						"issues"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create a New Issue without Authorization",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"HTTP status\", function(){\r",
							" pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "",
							"type": "string"
						},
						{
							"key": "username",
							"value": "",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"title\": \"I have created an issue\",\r\n\"body\": \"This is the body of issue.\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://api.github.com/repos/testnakov/test-nakov-repo/issues",
					"protocol": "https",
					"host": [
						"api",
						"github",
						"com"
					],
					"path": [
						"repos",
						"testnakov",
						"test-nakov-repo",
						"issues"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create a New Issue missing title",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"HTTP status 1\", function(){\r",
							" pm.response.to.have.status(422);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "ENTER YOUR PASSWORD, PLEASE.",
							"type": "string"
						},
						{
							"key": "username",
							"value": "ENTER YOUR USERNAME, PLEASE.",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"body\": \"This is the body of issue.\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://api.github.com/repos/testnakov/test-nakov-repo/issues",
					"protocol": "https",
					"host": [
						"api",
						"github",
						"com"
					],
					"path": [
						"repos",
						"testnakov",
						"test-nakov-repo",
						"issues"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create a comment",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let body= pm.response.json();\r",
							"let id = body.id;\r",
							"\r",
							"pm.test(\"HTTP status code\", function(){\r",
							" pm.expect(pm.response.code, \"STATUS CODE\").to.equal(201);\r",
							"});\r",
							"\r",
							"pm.test(\"HTTP status\", function(){\r",
							" pm.expect(pm.response.status).to.equal('Created');\r",
							"});\r",
							"\r",
							"pm.test(\"Check issue URL\", function(){ \r",
							"    let url = \"https://api.github.com/repos/testnakov/test-nakov-repo/issues/comments/\" + id;\r",
							" pm.expect(body.url, \"URL property\").to.equal(url);\r",
							"});\r",
							"\r",
							"pm.test(\"Check comment number\", function(){ \r",
							" pm.expect(body.id, \"Number property\").to.be.greaterThan(1);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "ENTER YOUR PASSWORD, PLEASE.",
							"type": "string"
						},
						{
							"key": "username",
							"value": "ENTER YOUR USERNAME, PLEASE.",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"body\": \"One more comment..\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://api.github.com/repos/testnakov/test-nakov-repo/issues/3035/comments",
					"protocol": "https",
					"host": [
						"api",
						"github",
						"com"
					],
					"path": [
						"repos",
						"testnakov",
						"test-nakov-repo",
						"issues",
						"3035",
						"comments"
					]
				}
			},
			"response": []
		},
		{
			"name": "Edit Existing Issue",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let body = pm.response.json();\r",
							"\r",
							"pm.test(\"HTTP status\", function(){\r",
							" pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response holds the posted issue 'issue' object\", function(){\r",
							"    pm.expect(pm.response.headers.get('Content-Type'))\r",
							"    .equals('application/json; charset=utf-8');\r",
							"    const requestIssue = JSON.parse(pm.request.body);\r",
							"    const responseIssue = pm.response.json();\r",
							"    pm.expect(typeof(responseIssue)).equals(\"object\");\r",
							"    pm.expect(Number.isInteger(responseIssue.id)).equals(true);\r",
							"    pm.expect(requestIssue.title).equals(responseIssue.title);\r",
							"    pm.expect(requestIssue.body).equals(responseIssue.body);  \r",
							"})\r",
							"\r",
							"pm.test(\"Check edit existing issue\", function(){    \r",
							" pm.expect(body.title).to.equal(\"Rename issue with Postman\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check body length\", function() {\r",
							"    pm.expect(body.title).to.include(\"Rename\");    \r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "ENTER YOUR PASSWORD, PLEASE.",
							"type": "string"
						},
						{
							"key": "username",
							"value": "ENTER YOUR USERNAME, PLEASE.",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"title\": \"Rename issue with Postman\",\r\n\"body\": \"Some body\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://api.github.com/repos/testnakov/test-nakov-repo/issues/3037",
					"protocol": "https",
					"host": [
						"api",
						"github",
						"com"
					],
					"path": [
						"repos",
						"testnakov",
						"test-nakov-repo",
						"issues",
						"3037"
					]
				}
			},
			"response": []
		},
		{
			"name": "Edit Existing Issue with non-existing ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"HTTP status\", function(){\r",
							" pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "ENTER YOUR PASSWORD, PLEASE.",
							"type": "string"
						},
						{
							"key": "username",
							"value": "ENTER YOUR USERNAME, PLEASE.",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"title\": \"Rename issue with Postman\",\r\n\"body\": \"Some body\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://api.github.com/repos/testnakov/test-nakov-repo/issues/99999999",
					"protocol": "https",
					"host": [
						"api",
						"github",
						"com"
					],
					"path": [
						"repos",
						"testnakov",
						"test-nakov-repo",
						"issues",
						"99999999"
					]
				}
			},
			"response": []
		},
		{
			"name": "Edit Existing Comment",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let response = pm.response.json();\r",
							"\r",
							"pm.test(\"HTTP status\", function(){\r",
							" pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Check edit existing issue\", function(){    \r",
							" pm.expect(response.body).to.equal(\"Changed comment\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check body length\", function() {\r",
							"    pm.expect(response.body).to.include(\"Changed\");    \r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "ENTER YOUR PASSWORD, PLEASE.",
							"type": "string"
						},
						{
							"key": "username",
							"value": "ENTER YOUR USERNAME, PLEASE.",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"body\": \"Changed comment\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://api.github.com/repos/testnakov/test-nakov-repo/issues/comments/981051192 ",
					"protocol": "https",
					"host": [
						"api",
						"github",
						"com"
					],
					"path": [
						"repos",
						"testnakov",
						"test-nakov-repo",
						"issues",
						"comments",
						"981051192 "
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete a comment",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "ENTER YOUR PASSWORD, PLEASE.",
							"type": "string"
						},
						{
							"key": "username",
							"value": "ENTER YOUR USERNAME, PLEASE.",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://api.github.com/repos/testnakov/test-nakov-repo/issues/comments/981051192",
					"protocol": "https",
					"host": [
						"api",
						"github",
						"com"
					],
					"path": [
						"repos",
						"testnakov",
						"test-nakov-repo",
						"issues",
						"comments",
						"981051192"
					]
				}
			},
			"response": []
		},
		{
			"name": "Close Existing Issue",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "ENTER YOUR PASSWORD, PLEASE.",
							"type": "string"
						},
						{
							"key": "username",
							"value": "ENTER YOUR USERNAME, PLEASE.",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"state\": \"closed\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://api.github.com/repos/testnakov/test-nakov-repo/issues/3035",
					"protocol": "https",
					"host": [
						"api",
						"github",
						"com"
					],
					"path": [
						"repos",
						"testnakov",
						"test-nakov-repo",
						"issues",
						"3035"
					]
				}
			},
			"response": []
		}
	]
}